# PawsomePals - Technical Assistant Guide

## Core Architecture Understanding

### Application Flow
1. Entry Point: `PawsomePalsApplication.kt`
   - Initializes Firebase, AppCheck, DataManager
   - Manages application lifecycle
   - Handles data synchronization

2. Main Activity: `MainActivity.kt`
   - Implements ViewModels using Hilt injection
   - Sets up navigation using Jetpack Compose
   - Manages application state

### User Flow States
1. Authentication States:
   ```kotlin
   sealed class AuthState {
       object Initial
       object Authenticated
       object Unauthenticated
   }
   ```

2. Required User Steps:
   - Authentication
   - Terms acceptance
   - Questionnaire completion
   - Dog profile creation

### Data Architecture

#### 1. Local Storage (Room)
- Main Tables:
  ```
  - users
  - dogs
  - chats
  - messages
  - playdates
  - questions
  - settings
  - photos
  - ratings
  - swipes
  - timeslots
  ```

#### 2. Remote Storage (Firebase)
- Firestore Collections:
  ```
  - users
  - dogs
  - chats
  - playdates
  - questionnaires
  ```
- Storage Buckets:
  ```
  - profile_pictures/
  - dog_photos/
  ```

#### 3. Synchronization Strategy
- DataManager handles bi-directional sync
- Conflict resolution prioritizes remote data
- Background sync with WorkManager

## Key Components

### 1. Authentication System
- Providers:
  - Email/Password
  - Google Sign-In
  - Facebook Login
- Security:
  - reCAPTCHA integration
  - Firebase App Check
  - Secure key storage

### 2. AI Integration
Services:
```kotlin
class AIFeatures(
    private val openAI: OpenAI,
    private val userRepository: UserRepository,
    private val questionRepository: QuestionRepository
) {
    fun getHealthAdvice()
    fun getDailyTrainingTip()
    fun getTrainerAdvice()
}
```

### 3. Dog Profile Management
- Profile Creation Flow:
  1. Basic Information
  2. Questionnaire
  3. Photo Upload
  4. Location Settings

- Profile Components:
  ```kotlin
  data class Dog(
      var id: String = "",
      var ownerId: String = "",
      var name: String = "",
      var breed: String = "",
      var age: Int = 0,
      var energyLevel: String = "",
      // Additional properties...
  )
  ```

### 4. Matching System
Components:
```kotlin
class MatchingService(
    private val locationService: LocationService
) {
    fun getCompatibilityScore()
    fun isMatch()
}
```

Compatibility Factors:
- Size compatibility
- Energy level
- Age compatibility
- Breed compatibility
- Location proximity

## ViewModels and Their Responsibilities

### 1. AuthViewModel
- Handles authentication state
- Manages user session
- Controls onboarding flow

### 2. ProfileViewModel
- User profile management
- Dog profile management
- Photo management
- Location updates

### 3. SwipingViewModel
- Profile queue management
- Match processing
- Swipe actions
- Match notifications

### 4. AIViewModel
- Health advice queries
- Training tips
- Expert consultations

### 5. PlaydateViewModel
- Playdate scheduling
- Location suggestions
- Availability management

## Common User Scenarios

### 1. New User Registration
```mermaid
graph TD
    A[Start] --> B[Email/Social Login]
    B --> C[Terms Acceptance]
    C --> D[Basic Profile]
    D --> E[Dog Questionnaire]
    E --> F[Photo Upload]
    F --> G[Complete]
```

### 2. Dog Matching Process
```mermaid
graph TD
    A[View Profile] --> B[Calculate Compatibility]
    B --> C[Swipe Decision]
    C -->|Right Swipe| D[Check Mutual]
    C -->|Left Swipe| E[Update DB]
    D -->|Match| F[Create Chat]
    D -->|No Match| G[Continue]
```

### 3. Playdate Scheduling
```mermaid
graph TD
    A[Match] --> B[Chat]
    B --> C[Suggest Time]
    C --> D[Location Selection]
    D --> E[Confirmation]
```

## Error Handling Guidelines

1. Authentication Errors:
   - Invalid credentials
   - Network issues
   - Token expiration

2. Data Sync Errors:
   - Conflict resolution
   - Connection failures
   - Retry mechanisms

3. AI Service Errors:
   - Rate limiting
   - API failures
   - Content filtering

## Key Points for Assistant Responses

When assisting users:

1. Auth Issues:
   - Check authentication state
   - Verify onboarding completion
   - Validate user permissions

2. Profile Issues:
   - Confirm data synchronization
   - Check questionnaire completion
   - Verify photo uploads

3. Matching Issues:
   - Review compatibility criteria
   - Check location settings
   - Verify profile visibility

4. AI Features:
   - Check subscription status
   - Verify query limits
   - Validate dog profile data

## Notification System

Types:
1. Chat messages
2. Playdate requests
3. Match notifications
4. AI recommendations
5. System updates

Channels:
```kotlin
const val CHANNEL_PLAYDATES = "playdates"
const val CHANNEL_MESSAGES = "messages"
const val CHANNEL_UPDATES = "updates"
```

## Data Model Relationships

```mermaid
erDiagram
    User ||--o{ Dog : owns
    User ||--o{ Chat : participates
    User ||--o{ Rating : receives
    Dog ||--o{ Playdate : participates
    Dog ||--o{ Swipe : receives
    Chat ||--o{ Message : contains
```

## Common Troubleshooting Steps

1. Data Sync Issues:
   - Check network connectivity
   - Verify Firebase connection
   - Review local database state

2. Profile Updates:
   - Check data validation
   - Verify photo upload process
   - Confirm questionnaire completion

3. Matching Problems:
   - Review compatibility settings
   - Check location permissions
   - Verify profile visibility

4. AI Service Issues:
   - Verify API key status
   - Check rate limits
   - Review request format

This documentation will help maintain context and provide accurate assistance across conversations about the PawsomePals application.